
sampler2D tex0;
sampler2D tex1;

float3 xsample( float2 uv, float2 iResolution, float2 bm )
	{
	return tex2D( tex0, uv * ( bm / iResolution ) );
	}

float3 filmic( float3 LinearColor )
	{
	float3 x = max(0.0, LinearColor-0.004);
	return (x*(6.2*x+0.5))/(x*(6.2*x+1.7)+0.06);
	}

float3 sample( float2 tc, float2 iResolution, float2 bm  )
	{
	float3 s = pow(xsample(float2(tc.x, tc.y), iResolution, bm ).rgb, 2.2);
	return s*1.25;
	}

float mod(float x, float y)
	{
	return x - y * floor(x/y);
	}
	
//Credit: http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float rand(float2 co)
	{
    return frac(sin(dot(co.xy ,float2(12.9898,78.233))) * 43758.5453);
	}

float2 curve(float2 uv)
	{
	uv = (uv - 0.5) * 2.0;
	uv *= 1.1;	
	uv.x *= 1.0 + pow((abs(uv.y) / 5.0), 2.0);
	uv.y *= 1.0 + pow((abs(uv.x) / 4.0), 2.0);
	uv  = (uv / 2.0) + 0.5;
	uv =  uv *0.92 + 0.04;
	return uv;
	}

float3 blur(float2 tc, float offs, float2 iResolution, float2 bm)
	{
	float4 xoffs = offs * float4(-2.0, -1.0, 1.0, 2.0) / iResolution.x;
	float4 yoffs = offs * float4(-2.0, -1.0, 1.0, 2.0) / iResolution.y;
	
	float3 color = float3(0.0, 0.0, 0.0);
	color += sample(tc + float2(xoffs.x, yoffs.x), iResolution, bm) * 0.00366;
	color += sample(tc + float2(xoffs.y, yoffs.x), iResolution, bm) * 0.01465;
	color += sample(tc + float2(    0.0, yoffs.x), iResolution, bm) * 0.02564;
	color += sample(tc + float2(xoffs.z, yoffs.x), iResolution, bm) * 0.01465;
	color += sample(tc + float2(xoffs.w, yoffs.x), iResolution, bm) * 0.00366;
	
	color += sample(tc + float2(xoffs.x, yoffs.y), iResolution, bm) * 0.01465;
	color += sample(tc + float2(xoffs.y, yoffs.y), iResolution, bm) * 0.05861;
	color += sample(tc + float2(    0.0, yoffs.y), iResolution, bm) * 0.09524;
	color += sample(tc + float2(xoffs.z, yoffs.y), iResolution, bm) * 0.05861;
	color += sample(tc + float2(xoffs.w, yoffs.y), iResolution, bm) * 0.01465;
	
	color += sample(tc + float2(xoffs.x, 0.0), iResolution, bm) * 0.02564;
	color += sample(tc + float2(xoffs.y, 0.0), iResolution, bm) * 0.09524;
	color += sample(tc + float2(    0.0, 0.0), iResolution, bm) * 0.15018;
	color += sample(tc + float2(xoffs.z, 0.0), iResolution, bm) * 0.09524;
	color += sample(tc + float2(xoffs.w, 0.0), iResolution, bm) * 0.02564;
	
	color += sample(tc + float2(xoffs.x, yoffs.z), iResolution, bm) * 0.01465;
	color += sample(tc + float2(xoffs.y, yoffs.z), iResolution, bm) * 0.05861;
	color += sample(tc + float2(    0.0, yoffs.z), iResolution, bm) * 0.09524;
	color += sample(tc + float2(xoffs.z, yoffs.z), iResolution, bm) * 0.05861;
	color += sample(tc + float2(xoffs.w, yoffs.z), iResolution, bm) * 0.01465;
	
	color += sample(tc + float2(xoffs.x, yoffs.w), iResolution, bm) * 0.00366;
	color += sample(tc + float2(xoffs.y, yoffs.w), iResolution, bm) * 0.01465;
	color += sample(tc + float2(    0.0, yoffs.w), iResolution, bm) * 0.02564;
	color += sample(tc + float2(xoffs.z, yoffs.w), iResolution, bm) * 0.01465;
	color += sample(tc + float2(xoffs.w, yoffs.w), iResolution, bm) * 0.00366;

	return color;
	}

float4 main( in float2 in_uv : TEXCOORD0, in float2 iResolution : TEXCOORD1, in float2 bm : TEXCOORD2, in float4 gl_FragCoord:SV_Position, float iGlobalTime : TEXCOORD3 ):COLOR0
	{
	float offset = 0.0;
	// Curve
	float2 FragCoord = float2( gl_FragCoord.x-offset, gl_FragCoord.y );
	float2 q = gl_FragCoord / iResolution;
	float2 uv = q;
	uv = lerp( curve( uv ), uv, 0.5 );
	float scale = 0.04;
	float2 scuv = uv*(1.0-scale)+scale/2.0+float2(0.003, -0.001);
	float3 oricol = xsample( q, iResolution, bm ).xyz;

	// Main color, Bleed
	float3 col;
	float x =  sin(0.1*iGlobalTime+uv.y*13.0)*sin(0.23*iGlobalTime+uv.y*19.0)*sin(0.3+0.11*iGlobalTime+uv.y*23.0)*0.0012;
	float o =sin(FragCoord.y*1.5)/iResolution.x;
	x+=o*0.25;
	col.r = blur(float2(x+scuv.x+0.0009,scuv.y+0.0009),iResolution.y/800.0, iResolution, bm ).x+0.02;
	col.g = blur(float2(x+scuv.x+0.0000,scuv.y-0.0011),iResolution.y/800.0, iResolution, bm ).y+0.02;
	col.b = blur(float2(x+scuv.x-0.0015,scuv.y+0.0000),iResolution.y/800.0, iResolution, bm ).z+0.02;
	float i = clamp(col.r*0.299 + col.g*0.587 + col.b*0.114, 0.0, 1.0 );
		
	i = pow( 1.0 - pow(i,2.0), 1.0 );
	i = (1.0-i) * 0.85 + 0.15;	

	// Ghosting
    float ghs = 0.15;
	float3 r = blur(float2(x-0.014*1.0, -0.027)*0.85+0.007*float2( 0.35*sin(1.0/7.0 + 15.0*uv.y + 0.9*iGlobalTime), 0.35*sin( 2.0/7.0 + 10.0*uv.y + 1.37*iGlobalTime) )+float2(scuv.x+0.001,scuv.y+0.001),5.5+1.3*sin( 3.0/9.0 + 31.0*uv.x + 1.70*iGlobalTime),iResolution,bm).xyz*float3(0.5,0.25,0.25);
	float3 g = blur(float2(x-0.019*1.0, -0.020)*0.85+0.007*float2( 0.35*cos(1.0/9.0 + 15.0*uv.y + 0.5*iGlobalTime), 0.35*sin( 2.0/9.0 + 10.0*uv.y + 1.50*iGlobalTime) )+float2(scuv.x+0.000,scuv.y-0.002),5.4+1.3*sin( 3.0/3.0 + 71.0*uv.x + 1.90*iGlobalTime),iResolution,bm).xyz*float3(0.25,0.5,0.25);
	float3 b = blur(float2(x-0.017*1.0, -0.003)*0.85+0.007*float2( 0.35*sin(2.0/3.0 + 15.0*uv.y + 0.7*iGlobalTime), 0.35*cos( 2.0/3.0 + 10.0*uv.y + 1.63*iGlobalTime) )+float2(scuv.x-0.002,scuv.y+0.000),5.3+1.3*sin( 3.0/7.0 + 91.0*uv.x + 1.65*iGlobalTime),iResolution,bm).xyz*float3(0.25,0.25,0.5);
	
	col += ghs*(1.0-0.299)*pow(clamp(3.0*r,0.0,1.0),2.0)*i;
    col += ghs*(1.0-0.587)*pow(clamp(3.0*g,0.0,1.0),2.0)*i;
    col += ghs*(1.0-0.114)*pow(clamp(3.0*b,0.0,1.0),2.0)*i;
	
	// Level adjustment (curves)
	col *= float3(0.95,1.05,0.95);
    col = clamp(col*1.3 + 0.75*col*col + 1.25*col*col*col*col*col,0.0,10.0);
	
	// Vignette
    float vig = (0.1 + 1.0*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y));
	vig = 1.3*pow(vig,0.5);
	col *= vig;
	
	// Scanlines
	float scans = clamp( 0.35+0.18*sin(6.0*iGlobalTime+uv.y*iResolution.y*1.5), 0.0, 1.0);
	float s = pow(scans,0.9);
	col = col* s ;

	// Vertical lines (aperture) 
	col*=1.0-0.23*(clamp((fmod(FragCoord.x, 3.0))/2.0,0.0,1.0));

	// Tone map
	col = filmic( col );

	// Noise
	float2 seed = floor(uv*iResolution.xy*0.5)/iResolution.xy;
	//seed = uv;
	col -= 0.015*pow(float3(rand( seed +iGlobalTime ), rand( seed +iGlobalTime*2.0 ), rand( seed +iGlobalTime * 3.0 ) ), (1.5) );
	
	// Flicker
    col *= (1.0-0.004*(sin(30.0*iGlobalTime+uv.y*2.0)*0.5+0.5));

	// Clamp
	if (uv.x < 0.0 || uv.x > 1.0)
		col *= 0.0;
	if (uv.y < 0.0 || uv.y > 1.0)
		col *= 0.0;

		
	// Frame
	
	float2 fscale = float2( -0.019, -0.018 );
	float4 f=tex2D(tex1,q*((1.0)+2.0*fscale)-fscale-float2(-0.0, 0.005));
	f.xyz = lerp( f.xyz, float3(0.5,0.5,0.5), 0.5 );
	float fvig = clamp( -0.00+512.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2, 0.8 );
	col = lerp( max( col, 0.0), pow( f.xyz, ( 1.4 ) ) * fvig, f.w * f.w);

	// Crossfade
    float comp = smoothstep( 0.1, 0.9, sin(iGlobalTime) );
  //  col = lerp( col, oricol, comp );

	return float4( col, 1.0f);
}		



float4 blur2(sampler2D tex, float2 tc, float offs, float2 iResolution )
	{
	float4 xoffs = offs * float4(-2.0, -1.0, 1.0, 2.0) / iResolution.x;
	float4 yoffs = offs * float4(-2.0, -1.0, 1.0, 2.0) / iResolution.y;
	
	float4 color = float4(0.0, 0.0, 0.0, 0.0);
	color += tex2D(tex,tc + float2(xoffs.x, yoffs.x)) * 0.00366;
	color += tex2D(tex,tc + float2(xoffs.y, yoffs.x)) * 0.01465;
	color += tex2D(tex,tc + float2(    0.0, yoffs.x)) * 0.02564;
	color += tex2D(tex,tc + float2(xoffs.z, yoffs.x)) * 0.01465;
	color += tex2D(tex,tc + float2(xoffs.w, yoffs.x)) * 0.00366;
	
	color += tex2D(tex,tc + float2(xoffs.x, yoffs.y)) * 0.01465;
	color += tex2D(tex,tc + float2(xoffs.y, yoffs.y)) * 0.05861;
	color += tex2D(tex,tc + float2(    0.0, yoffs.y)) * 0.09524;
	color += tex2D(tex,tc + float2(xoffs.z, yoffs.y)) * 0.05861;
	color += tex2D(tex,tc + float2(xoffs.w, yoffs.y)) * 0.01465;
	
	color += tex2D(tex,tc + float2(xoffs.x, 0.0)) * 0.02564;
	color += tex2D(tex,tc + float2(xoffs.y, 0.0)) * 0.09524;
	color += tex2D(tex,tc + float2(    0.0, 0.0)) * 0.15018;
	color += tex2D(tex,tc + float2(xoffs.z, 0.0)) * 0.09524;
	color += tex2D(tex,tc + float2(xoffs.w, 0.0)) * 0.02564;
	
	color += tex2D(tex,tc + float2(xoffs.x, yoffs.z)) * 0.01465;
	color += tex2D(tex,tc + float2(xoffs.y, yoffs.z)) * 0.05861;
	color += tex2D(tex,tc + float2(    0.0, yoffs.z)) * 0.09524;
	color += tex2D(tex,tc + float2(xoffs.z, yoffs.z)) * 0.05861;
	color += tex2D(tex,tc + float2(xoffs.w, yoffs.z)) * 0.01465;
	
	color += tex2D(tex,tc + float2(xoffs.x, yoffs.w)) * 0.00366;
	color += tex2D(tex,tc + float2(xoffs.y, yoffs.w)) * 0.01465;
	color += tex2D(tex,tc + float2(    0.0, yoffs.w)) * 0.02564;
	color += tex2D(tex,tc + float2(xoffs.z, yoffs.w)) * 0.01465;
	color += tex2D(tex,tc + float2(xoffs.w, yoffs.w)) * 0.00366;

	return color;
	}

float4 acc_main( in float2 uv : TEXCOORD0, in float2 iResolution : TEXCOORD1, in float4 modulate: COLOR0 ):COLOR0
	{
	float4 a = tex2D( tex0, uv) * modulate;
	float4 b = blur2( tex1, uv, 1.0f, iResolution);

	float4 col = max( a, b*0.9f ) ;

	return col;
	}		

float4 blend_main( in float2 uv : TEXCOORD0, in float4 modulate: COLOR0 ):COLOR0
	{
	float4 a = tex2D( tex0, uv) * modulate;
	float4 b = tex2D( tex1, uv);

	float4 col = max( a, b*0.5f ) ; //0.35

	return col;
	}		
